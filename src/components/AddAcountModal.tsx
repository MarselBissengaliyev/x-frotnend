import clsx from "clsx";
import { useRef, useState } from "react";
import { AiOutlineClose } from "react-icons/ai";
import { FiSave, FiSend, FiShield } from "react-icons/fi";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import axiosInstance from "../axiosConfig";
import { Account } from "../pages/Dashboard";

type Props = {
  setAccounts: React.Dispatch<React.SetStateAction<Account[]>>;
  setIsModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
};

export default function AddAccountModal({
  setAccounts,
  setIsModalOpen,
}: Props) {
  const [login, setLogin] = useState("");
  const [password, setPassword] = useState("");
  const [proxy, setProxy] = useState("");
  const [method, setMethod] = useState("–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è");
  const [errors, setErrors] = useState<{ login?: string; password?: string }>({});
  const [is2FA, setIs2FA] = useState(false);
  const [twoFACode, setTwoFACode] = useState("");
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [isChallenge, setIsChallenge] = useState(false);
  const [challengeInput, setChallengeInput] = useState("");
  const [loading, setLoading] = useState(false); // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

  const loginRef = useRef<HTMLInputElement>(null);
  const navigate = useNavigate();

  const resetFormAndNavigate = (id: string) => {
    setLogin("");
    setPassword("");
    setProxy("");
    setMethod("–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è");
    setTwoFACode("");
    setIs2FA(false);
    setIsChallenge(false);
    setSessionId(null);
    setIsModalOpen(false);
    setErrors({});
    navigate(`/content-settings/${id}`);
  };

  const handleSave = async () => {
    const newErrors: typeof errors = {};
    if (!login.trim()) newErrors.login = "–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    if (!password.trim()) newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    setLoading(true); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É

    try {
      const response = await axiosInstance.post("/accounts", {
        login,
        password,
        proxy: proxy.length > 0 ? proxy : undefined,
        method: method === "–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" ? 1 : 2,
        userAgent: "default",
      });

      if (response.data.challengeRequired) {
        toast.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ");
        setSessionId(response.data.sessionId);
        setIsChallenge(true);
        return;
      }

      if (response.data.twoFactorRequired) {
        toast.info("–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –∫–æ–¥");
        setSessionId(response.data.sessionId);
        setIs2FA(true);
        return;
      }

      if (!response.data.id) {
        toast.error("–ù–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
      }

      const newAccount: Account = {
        id: new Date(Date.now()).toString(),
        login,
        totalPosts: 0,
        postsToday: 0,
        method: method === "–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" ? 1 : 2,
      };

      setAccounts((prev) => [...prev, newAccount]);
      resetFormAndNavigate(response.data.id);
    } catch {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
    } finally {
      setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    }
  };

  const handle2FASubmit = async () => {
    if (!twoFACode.trim()) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥.");
      return;
    }

    setLoading(true);

    try {
      const res = await axiosInstance.post("/accounts/submit-code", {
        sessionId,
        code: twoFACode,
        login,
      });

      if (res.data.success) {
        const newAccount: Account = {
          id: new Date(Date.now()).toString(),
          login,
          totalPosts: 0,
          postsToday: 0,
          method: method === "–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" ? 1 : 2,
        };

        toast.success("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ 2FA!");
        setAccounts((prev) => [...prev, newAccount]);
        resetFormAndNavigate(newAccount.login);
      }
    } catch {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ 2FA");
    } finally {
      setLoading(false);
    }
  };

  const handleChallengeSubmit = async () => {
    if (!challengeInput.trim()) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.");
      return;
    }

    setLoading(true);

    try {
      const res = await axiosInstance.post("/accounts/submit-challenge", {
        sessionId,
        challengeInput,
        password,
      });

      if (res.data.success) {
        const newAccount: Account = {
          id: new Date(Date.now()).toString(),
          login,
          totalPosts: 0,
          postsToday: 0,
          method: method === "–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" ? 1 : 2,
        };

        toast.success("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!");
        setAccounts((prev) => [...prev, newAccount]);
        resetFormAndNavigate(newAccount.id);
      }
    } catch {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      className="fixed inset-0 z-50 bg-black/40 backdrop-blur-sm flex items-center justify-center"
      onClick={(e) => {
        if (e.target === e.currentTarget) setIsModalOpen(false);
      }}
    >
      <div className="bg-white rounded-3xl shadow-2xl w-full max-w-md p-6 relative animate-fadeIn">
        <button
          onClick={() => setIsModalOpen(false)}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
          aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
        >
          <AiOutlineClose size={22} />
        </button>

        <h2 className="text-2xl font-semibold mb-6 text-center text-gray-800">
          –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </h2>

        <div className="space-y-5">
          <div>
            <input
              ref={loginRef}
              type="text"
              placeholder="–õ–æ–≥–∏–Ω"
              value={login}
              onChange={(e) => {
                setLogin(e.target.value);
                setErrors((prev) => ({ ...prev, login: undefined }));
              }}
              className={clsx(
                "w-full px-4 py-3 border rounded-xl shadow-sm focus:outline-none",
                errors.login
                  ? "border-red-500 focus:border-red-500"
                  : "focus:ring focus:border-blue-400"
              )}
              disabled={loading} // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–ø—É—Ç –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            />
            {errors.login && (
              <p className="text-red-500 text-sm mt-1">{errors.login}</p>
            )}
          </div>

          <div>
            <input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={password}
              onChange={(e) => {
                setPassword(e.target.value);
                setErrors((prev) => ({ ...prev, password: undefined }));
              }}
              className={clsx(
                "w-full px-4 py-3 border rounded-xl shadow-sm focus:outline-none",
                errors.password
                  ? "border-red-500 focus:border-red-500"
                  : "focus:ring focus:border-blue-400"
              )}
              disabled={loading} // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–ø—É—Ç –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            />
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">{errors.password}</p>
            )}
          </div>

          <div>
            <input
              type="text"
              placeholder="–ü—Ä–æ–∫—Å–∏ (IP:PORT:LOGIN:PASSWORD)"
              value={proxy}
              onChange={(e) => setProxy(e.target.value)}
              className="w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring focus:border-blue-300"
              disabled={loading} // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–ø—É—Ç –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            />
            <p className="text-xs text-gray-400 mt-1">
              üí° –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.
            </p>
          </div>

          <div>
            <label className="block mb-1 font-medium">
              –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
              <span
                className="ml-1 text-gray-400 cursor-help"
                title="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
              >
                ‚ìò
              </span>
            </label>
            <select
              value={method}
              onChange={(e) => setMethod(e.target.value)}
              className="w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring focus:border-blue-300"
              disabled={loading} // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–ø—É—Ç –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            >
              <option value="–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è">–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</option>
              <option value="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ + –ø–∞—Ä—Å–∏–Ω–≥">
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ + –ø–∞—Ä—Å–∏–Ω–≥
              </option>
            </select>
          </div>

          <p className="text-sm text-gray-500 flex items-center gap-1">
            <FiShield className="text-blue-400" /> User-Agent:{" "}
            <span className="italic">–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</span>
          </p>

          <button
            onClick={handleSave}
            className={clsx(
              "w-full flex items-center justify-center gap-2 py-2.5 rounded-2xl font-medium transition-all",
              loading ? "bg-gray-400 cursor-not-allowed" : "bg-blue-600 text-white hover:bg-blue-700"
            )}
            disabled={loading} // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          >
            {loading ? (
              <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span> // –°–ø–∏–Ω–Ω–µ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç "–ó–∞–≥—Ä—É–∑–∫–∞..."
            ) : (
              <>
                <FiSave />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏
              </>
            )}
          </button>

          {is2FA && (
            <div className="border-t pt-4 mt-4">
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥"
                value={twoFACode}
                onChange={(e) => setTwoFACode(e.target.value)}
                className="w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring focus:border-green-400"
                disabled={loading}
              />
              <button
                onClick={handle2FASubmit}
                className={clsx(
                  "w-full flex items-center justify-center gap-2 py-2.5 rounded-2xl mt-3 transition-all",
                  loading ? "bg-gray-400 cursor-not-allowed" : "bg-green-600 text-white hover:bg-green-700"
                )}
                disabled={loading}
              >
                {loading ? <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span> : <><FiSend /> –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å 2FA</>}
              </button>
            </div>
          )}

          {isChallenge && (
            <div className="border-t pt-4 mt-4">
              <input
                type="text"
                placeholder={`–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∞–∫–∫–∞—É–Ω—Ç –∑–∞–ø–æ–¥–æ–∑—Ä–µ–Ω –≤ —á–∞—Å—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.`}
                value={challengeInput}
                onChange={(e) => setChallengeInput(e.target.value)}
                className="w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring focus:border-yellow-400"
                disabled={loading}
              />
              <button
                onClick={handleChallengeSubmit}
                className={clsx(
                  "w-full flex items-center justify-center gap-2 py-2.5 rounded-2xl mt-3 transition-all",
                  loading ? "bg-gray-400 cursor-not-allowed" : "bg-yellow-600 text-white hover:bg-yellow-700"
                )}
                disabled={loading}
              >
                {loading ? <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span> : <><FiSend /> –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</>}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
